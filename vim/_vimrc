" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" My own configs
let MY_THEME = 'iceberg'
let ENABLE_TABNINE = 0

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" :help cino-( to control the indentation inside unclosed parenthesis
set cino+=(0

set history=100		" keep 100 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" Don't use Ex mode, use Q for formatting
map Q gq

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  "
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" Line numbers
set number

" Buffer switching using Cmd-arrows in Mac and Alt-arrows in Linux
:nnoremap <D-Right> :bnext<CR>
:nnoremap <M-Right> :bnext<CR>
:nnoremap <D-Left> :bprevious<CR>
:nnoremap <M-Left> :bprevious<CR>
" and don't let MacVim remap them
if has("gui_macvim")
   let macvim_skip_cmd_opt_movement = 1
endif

" When coding, auto-indent by 4 spaces, just like in K&R
" Note that this does NOT change tab into 4 spaces
" You can do that with "set tabstop=4", which is a BAD idea
set shiftwidth=4
set tabstop=4

" Always replace tab with spaces, except for makefiles
set expandtab
autocmd FileType make setlocal noexpandtab

" My settings when editing text files
"   - automatically indent lines according to previous lines
"   - replace tab with 8 spaces
"   - when I hit tab key, move 2 spaces instead of 8
"   - wrap text if I go longer than 76 columns
autocmd FileType text setlocal autoindent expandtab softtabstop=2 textwidth=76

" Prepend ~/.backup to backupdir so that Vim will look for that directory
" before littering the current dir with backups.
" You need to do "mkdir ~/.backup" for this to work
set backupdir^=~/.backup

" Also use ~/.backup for swap files. The trailing // tells Vim to incorporate
" full path into swap file names.
set dir^=~/.backup//

" To enable plugin
filetype plugin on

" set yank to system clipboard, so we can copy between vims
set clipboard=unnamed
"

" then we can get the wrapper effect
set whichwrap+=<,>,h,l,[,]

"========== Customize key mappings
let mapleader = ","
"
" Ctrl-X is for temporary Esc mode in insert mode
" map! is for insert mode
" inoremap <C-X> <Esc>
inoremap <C-R> <Esc><C-R>i
" inoremap <C-C> <C-O>u
" inoremap <C-Y> <C-O>u
" inoremap <C-P> <C-O>o
" inoremap <C-B> <C-O>$;
" noremap <C-B> $a;
inoremap <C-G> <C-w>
noremap <C-G> <C-w>
inoremap <C-w> <C-O>:q! <Enter>
noremap <C-w> :q! <Enter>
inoremap <C-e> <C-O>:wq <Enter>
noremap <C-e> :wq <Enter>
inoremap <C-z> <Esc>:w <Enter>
noremap <C-z> :w <Enter>
inoremap <C-D> <C-O>$
noremap <C-D> $a
inoremap <C-A> <C-O>^
noremap <C-A> ^
"inoremap <C-F> <Esc> /
"noremap <C-F> : /
" directions shortcut
inoremap <C-U> <Left>
inoremap <C-J> <Down>
inoremap <C-K> <Up>
inoremap <C-L> <Right>
" Move entire lines up and down
map <C-Up> ddkP
imap <C-Up> <Esc>ddkP
map <C-Down> ddp
imap <C-Down> <Esc>ddp
map <C-Left> V<
imap <C-Left> <Esc>V<
map <C-Right> V>
imap <C-Right> <Esc>V>
" Select text until the closing bracket
noremap % v%

" https://vim.fandom.com/wiki/Short_mappings_for_common_tasks
noremap L $
noremap H ^
noremap ; :
" copy text to the end-of-line
nnoremap Y y$
" copy an entire line, and paste it before the current line
" Use a count to specify the line number (default is line 1).
" For example, 12_ would copy line 12 to before the current line.
nnoremap _ ggY``P

" For quick recordings just type qq to start recording, then q to stop. 
" You don't have to worry about the name this way (you just named the recording 'q'). 
" Now, to play back the recording you just type Q. 
nnoremap Q @q


" Copy out to system clipboard
vnoremap <M-c> "*y
inoremap <M-v> <Esc>"*p
map <M-v> "*p
vnoremap <M-x> "*d

" tab navigation:
" gt            go to next tab
" gT            go to previous tab
" {i}gt         go to tab in position i


" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
set pastetoggle=<F2>
set encoding=utf-8

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/vimplug')

" Make sure you use single quotes

Plug 'tpope/vim-surround'
Plug 'tpope/vim-sensible'
Plug 'easymotion/vim-easymotion'
Plug 'vim-airline/vim-airline'
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-repeat'
Plug 'jiangmiao/auto-pairs'
Plug 'yggdroot/indentline'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'honza/vim-snippets'
Plug 'terryma/vim-multiple-cursors'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
if (ENABLE_TABNINE == 1)
    " TabNine requires ~/.config/TabNine/tabnine_config.json
    Plug 'codota/tabnine-vim'
endif

" Themes
Plug 'mhartington/oceanic-next'
Plug 'zacanger/angr.vim'
Plug 'tyrannicaltoucan/vim-deep-space'
Plug 'challenger-deep-theme/vim'
Plug 'christophermca/meta5'
Plug 'cocopon/iceberg.vim'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'rakr/vim-two-firewatch'
Plug 'joshdick/onedark.vim'

" Initialize plugin system
call plug#end()


" ============= color theme 
if (has("termguicolors"))
  set termguicolors
endif
set background=dark

" https://vim.fandom.com/wiki/Xterm256_color_names_for_console_Vim
try
    if MY_THEME ==? "ocean"
        let g:oceanic_next_terminal_bold = 1
        let g:oceanic_next_terminal_italic = 1
        let g:airline_theme='oceanicnext'
        colorscheme OceanicNext
    elseif MY_THEME ==? "angr"
        colorscheme angr
    elseif MY_THEME ==? "deep-space"
        let g:deepspace_italics=1
        let g:airline_theme='deep_space'
        colorscheme deep-space
    elseif MY_THEME ==? "challenger"
        colorscheme challenger_deep
    elseif MY_THEME ==? "meta5"
        colorscheme meta5
    elseif MY_THEME ==? "iceberg"
        colorscheme iceberg
        " DeepSkyBlue4
        hi Visual ctermbg=24
        hi Search ctermbg=24
    elseif MY_THEME ==? "hybrid_material"
        let g:enable_bold_font = 1
        let g:enable_italic_font = 1
        colorscheme hybrid_material
    elseif MY_THEME ==? "twofirewatch"
        let g:two_firewatch_italics=1
        let g:airline_theme='twofirewatch'
        colorscheme two-firewatch
    elseif MY_THEME ==? "onedark"
        let g:onedark_terminal_italics = 1
        let g:airline_theme='onedark'
        colorscheme onedark
    else
        " no theme
        "hi Search ctermbg=LightBlue
        "hi Visual ctermbg=LightBlue
    endif
catch /^Vim\%((\a\+)\)\=:E185/
    " not available at :PlugInstall time, but will work at run time
endtry


" ============== NERDTree
" uncomment this line will start NERDtree automatically
"autocmd vimenter * NERDTree
nnoremap <C-n> :NERDTreeToggle<CR>

" ============== NERDCommenter
let g:NERDDefaultAlign = 'left'
map <leader>cc <Plug>NERDCommenterAlignLeft('nx', 'AlignLeft')<Cr>
" C-/ is not recognized by vim
"map <C-_> <Plug>NERDCommenterAlignLeft('nx', 'AlignLeft')<Cr>
map gcc <Plug>NERDCommenterToggle('nx', 'Toggle')
map <C-\> <Plug>NERDCommenterToggle('nx', 'Toggle')
map <leader>c_ <Plug>NERDCommenterComment('nx', 'Comment')<Cr>

" ============= yggdroot/indentline
let g:indentLine_char = '‚ñè'
let g:indentLine_color_term = 245

" ============= CtrlP fuzzy file search
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ca'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" ============= incsearch + fuzzy + easymotion in one shot
" https://github.com/easymotion/vim-easymotion#bonus-fuzzy-search-with-easymotion
" map to key <space>/ to do fuzzy search

function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzy#converter()],
  \   'modules': [incsearch#config#easymotion#module()],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> <Space> incsearch#go(<SID>config_easyfuzzymotion())
noremap <silent><expr> <C-F> incsearch#go(<SID>config_easyfuzzymotion())

" ================ easymotion 
" defaults to double <Leader> key
" https://github.com/easymotion/vim-easymotion/blob/master/doc/easymotion.txt
map <leader>w <Plug>(easymotion-w)
map <leader>W <Plug>(easymotion-W)
map <leader>b <Plug>(easymotion-b)
map <leader>B <Plug>(easymotion-B)
map <leader>f <Plug>(easymotion-f)
map <leader>F <Plug>(easymotion-F)
map <leader>t <Plug>(easymotion-t)
map <leader>T <Plug>(easymotion-T)
map <leader>e <Plug>(easymotion-e)
map <leader>E <Plug>(easymotion-E)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader>ge <Plug>(easymotion-ge)
map <leader>gE <Plug>(easymotion-gE)
map <leader>n <Plug>(easymotion-n)
map <leader>N <Plug>(easymotion-N)
map <leader>s <Plug>(easymotion-s)
